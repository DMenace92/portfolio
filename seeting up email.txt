To set up emailing functionality in a React Node.js website, you can follow these steps:

1. Set Up a Node.js Server: Start by setting up a Node.js server to handle the backend functionality of your React application. You can use frameworks like Express.js or Nest.js to simplify the server-side development process.

2. Choose an Email Service Provider: Select an email service provider that offers SMTP (Simple Mail Transfer Protocol) functionality. Popular options include SendGrid, Nodemailer, or Mailgun. Sign up for an account and obtain the necessary credentials/API key.

3. Install Required Packages: In your Node.js project directory, install the required packages to interact with the chosen email service provider. For example, if you're using Nodemailer, you can install it using npm or yarn:
   
   ```bash
   npm install nodemailer
   ```

4. Set Up SMTP Configuration: Configure your email service provider's SMTP settings in your Node.js server code. This typically involves specifying the SMTP server, port number, authentication credentials, and other relevant details. Here's an example using Nodemailer:

   ```javascript
   const nodemailer = require('nodemailer');

   // Create a transport object with SMTP configuration
   const transporter = nodemailer.createTransport({
     host: 'smtp.example.com',
     port: 587,
     secure: false, // true for 465, false for other ports
     auth: {
       user: 'your-email@example.com',
       pass: 'your-password'
     }
   });
   ```

   Make sure to replace the placeholder values with your email service provider's SMTP server, port, and your authentication credentials.

5. Implement Email Sending Logic: Create a function or route handler in your Node.js server to handle email sending requests. For example, if you're using Express.js, you can define a route like this:

   ```javascript
   app.post('/send-email', (req, res) => {
     const { recipient, subject, message } = req.body;

     const mailOptions = {
       from: 'your-email@example.com',
       to: recipient,
       subject: subject,
       text: message
     };

     transporter.sendMail(mailOptions, (error, info) => {
       if (error) {
         console.error(error);
         res.status(500).send('Error sending email');
       } else {
         console.log('Email sent: ' + info.response);
         res.send('Email sent successfully');
       }
     });
   });
   ```

   In this example, the `/send-email` route expects the recipient's email address, subject, and message in the request body. Adjust the logic according to your requirements.

6. Connect Backend and Frontend: In your React frontend, create a form or component where users can input the necessary email information. Handle the form submission and send an HTTP POST request to the server endpoint you created in step 5, passing the email details as JSON data.

   You can use libraries like Axios or the built-in Fetch API to send the request from your React component.

7. Test and Refine: Start your Node.js server and test the email functionality by submitting the form or triggering the email sending mechanism in your React app. Check the server console for any error messages and ensure that the emails are being delivered successfully.

Remember to handle error scenarios, validate user input, and add appropriate error handling in both the server and client-side code.

Please note that this is a basic outline, and you may need to modify the code to fit your specific requirements, such as email templates, attachments, or additional functionality.